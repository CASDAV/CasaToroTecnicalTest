// <auto-generated />
using System;
using ConcessionaireAppServer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConcessionaireAppServer.Entities.Migrations
{
    [DbContext(typeof(CasaToroTestDbContext))]
    [Migration("20241018161835_PruebaTable")]
    partial class PruebaTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = -5,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = -6,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = -7,
                            Name = "Renault"
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Prueba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Prueba", (string)null);
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CustomerEmail = "test.sampleCustomer1@example.com",
                            CustomerName = "TestCustomer1",
                            CustomerPhone = "72651726",
                            SaleAmount = 93000000m,
                            SaleDate = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4540),
                            SellerId = 1,
                            VehicleId = -3
                        },
                        new
                        {
                            Id = -2,
                            CustomerEmail = "test.sampleCustomer2@example.com",
                            CustomerName = "TestCustomer2",
                            CustomerPhone = "72651726",
                            SaleAmount = 94000000m,
                            SaleDate = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4570),
                            SellerId = 2,
                            VehicleId = -6
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Sellers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test.sample@example.com",
                            JoinDate = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4472),
                            Location = "Test street",
                            Name = "TestSeller",
                            PhoneNumber = "4273629"
                        },
                        new
                        {
                            Id = 2,
                            Email = "test.sample2@example.com",
                            JoinDate = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4507),
                            Location = "Test street",
                            Name = "TestSeller2",
                            PhoneNumber = "7332626"
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.TransmisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("TransmisionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Automatic"
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransmissionTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BrandId = -1,
                            Color = "Red",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4184),
                            Mileage = 0,
                            Model = "CX-30",
                            Price = 93000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -2,
                            BrandId = -1,
                            Color = "Blue",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4247),
                            Mileage = 0,
                            Model = "CX-30",
                            Price = 93000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -3,
                            BrandId = -1,
                            Color = "Black",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4277),
                            Mileage = 0,
                            Model = "CX-30",
                            Price = 93000000m,
                            StatusId = -2,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -4,
                            BrandId = -3,
                            Color = "Gray",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4304),
                            Mileage = 0,
                            Model = "Nivus",
                            Price = 94000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -5,
                            BrandId = -3,
                            Color = "Red",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4338),
                            Mileage = 0,
                            Model = "Nivus",
                            Price = 94000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -6,
                            BrandId = -3,
                            Color = "Gray",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4369),
                            Mileage = 0,
                            Model = "Nivus",
                            Price = 94000000m,
                            StatusId = -2,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -7,
                            BrandId = -1,
                            Color = "Red",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4399),
                            Mileage = 0,
                            Model = "CX-30",
                            Price = 93000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        },
                        new
                        {
                            Id = -8,
                            BrandId = -1,
                            Color = "Red",
                            DateAdded = new DateTime(2024, 10, 18, 11, 18, 29, 995, DateTimeKind.Local).AddTicks(4429),
                            Mileage = 0,
                            Model = "CX-30",
                            Price = 93000000m,
                            StatusId = -1,
                            TransmissionTypeId = -2,
                            VehicleTypeId = -1,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.VehicleStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("VehicleStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Status = "Available"
                        },
                        new
                        {
                            Id = -2,
                            Status = "Sold"
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = -4,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = -5,
                            Name = "Hatchback"
                        });
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.ViewSaleDetail", b =>
                {
                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.ToTable((string)null);

                    b.ToView("ViewSalesDetails", (string)null);
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Sale", b =>
                {
                    b.HasOne("ConcessionaireAppServer.Entities.Entities.Seller", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionaireAppServer.Entities.Entities.Vehicle", "Vehicle")
                        .WithOne("Sale")
                        .HasForeignKey("ConcessionaireAppServer.Entities.Entities.Sale", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Vehicle", b =>
                {
                    b.HasOne("ConcessionaireAppServer.Entities.Entities.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionaireAppServer.Entities.Entities.VehicleStatus", "VehicleStatus")
                        .WithMany("Vehicles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionaireAppServer.Entities.Entities.TransmisionType", "TransmissionType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcessionaireAppServer.Entities.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("TransmissionType");

                    b.Navigation("VehicleStatus");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Brand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Seller", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.TransmisionType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.Vehicle", b =>
                {
                    b.Navigation("Sale");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.VehicleStatus", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcessionaireAppServer.Entities.Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
